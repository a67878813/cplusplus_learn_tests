{
    "version": "2.0.0",
    "tasks": [
        {
            "type": "process", // 可以为process或shell
            "label": "Compile", // 任务名称，与launch.json的preLaunchTask相对应
            
            "command": "/usr/bin/clang++-13", // 要使用的编译器，C语言用clang
            // "command": "/usr/bin/clang", // 要使用的编译器，C语言用clang
            "args": [
                // "-fdiagnostics-color=always",
                // "-std=c++17",
                "-g",
                "${file}",
                // "${fileDirname}/src/Formula.cpp",
                // "-v",
                //"-I/usr/include/c++/11",
                //"-I/usr/lib/gcc/x86_64-linux-gnu/11",
                // "-I/usr/local/lib/include", //google benchmark
                // "-I/usr/local/lib", //google benchmark
                // "-L/usr/local/lib",
                // "-I/home/sa/benchmark/src",
                // "-L/usr/local/share/doc/",
                "-L${fileDirname}/src",
                "-I${fileDirname}/src",
                // "-L/usr/local/include",
                // "-lbenchmark",
                // "-lpthread",
                "-o", // 指定输出文件名，os X和Linux下不加该参数则默认输出a.out，win下默认a.exe
                "${fileDirname}/${fileBasenameNoExtension}.out", // 指定编译生成结果（.out文件和.out.dSYM文件夹）
                // "-Wall", // 开启额外警告
                // "-I/usr/include/c++/11",
                // "-I/usr/include/x86_64-linux-gnu/c++/11",
                // "-I/usr/lib/llvm-13/include/c++/v1",
                // "-I/usr/local/include",
                // "-L/usr/lib/x86_64-linux-gnu/",
                // "-WI",
                // "-rpath=/usr//x86_64-linux-gnu/",
                // "-v",
                // "-stdlib=libc++", // 静态链接libc++，Linux下似乎会出错，出错的话删掉这行就行
                // ubuntu nees
                // sudo apt install libc++-dev, libunwind-dev
                // "-O3", // o3 youhua
                "-std=c++2a", // 这里采用c++17标准（推荐），C语言改成"-std=c11"
                "-fms-extensions",
                // "-std=c11", // 这里采用c++17标准（推荐），C语言改成"-std=c11"
                // "-fmodules-ts",
                // "-fbuiltin-module-map",
                // "-fimplicit-module-maps",
                // "-fprebuilt-module-path=${fileDirname}",//c++2a module path
            ], // 编译的命令，其实相当于VSC帮你在终端中输了这一串东西
            "group": {
                "kind": "build",
                "isDefault": true // 不为true时command shift B快捷键就要手动选择了
            },
            "options": {
                "cwd": "${fileDirname}"
            },
            "presentation": {
                "echo": true,
                "reveal": "always", // 执行任务时是否跳转到终端面板，可以为always，silent，never。具体参见VSC的文档，即使设为never，手动点进去还是可以看到
                "focus": false, // 设为true后可以使执行task时焦点聚集在终端，但对编译C/C++来说，设为true没有意义
                "panel": "shared" // 不同的文件的编译信息共享一个终端面板
            },
            "detail": "Task generated by Debugger."
        }
    ]
}