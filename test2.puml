@startuml

' interface ListIterator

' class Widget{
'     int size()

' }

' abstract class AbstractCollection{
'     {abstract} +int size()
'     {abstract} +Iterator<E> iterator()
' }


' class AbstractCollection{
'     +int size()
'     {abstract} +Iterator<E> iterator()
' }

class basic_ios <<general>> {
    {abstract} virtual fffff
    {static} size_t time_of_create
    ..
    -std::string fileName()
    {field} File: equals() 
    {method} #protected 
    {method} -private  
    ==
    {method} ~ package private 
    --
    {method} + public 
    End of class
}
' note left  : asdasdasdadasdas

note left of basic_ios::fileName
sdfsdfsd
end note


' - private 
' # protected 
' ~ package private 
' + public 


class basic_istream{
    .. Simple Getter ..
    + getName()
    +getAddress()
    ..SomeSetter ..
    + setName()

    -- private data  --
    int age 

    -- encrypted --
    String password
    
}

class baic_ostream{}

class basic_iostream{}

basic_ios <|-- baic_ostream: {virtual}
basic_ios <|-- basic_istream :{virtual}
baic_ostream <|-- basic_iostream
basic_istream <|-- basic_iostream

basic_iostream - sdff :> dfdf

' <|--
' *--
' o--
' <|..
' *..
' o..


' Widget <|.. AbstractCollection

' Widget *-- ListIterator


' Class21 #-- Class22
' Class23 x-- Class24
' Class25 }-- Class26
' Class27 +-- Class28
' Class29 ^-- Class30


@enduml



@startuml
interface  IPerson{
    {abstract} ~IPerson()
    {abstract} std::string name() = 0
    {abstract} std::string birthDate() const = 0;

}

class CPerson{
    +CPercon()
    +std::string name() const 
    +std::string birthDate() const 
    --
    -const char* valueDelimOpen() const 
    -const char* valueDelimClose() const

}
class PersonInfo{
    +PersonInfo(DatabaseID pid);
    {abstract} ~PersonInfo();
    +const char* theName() const;
    +const char* theBirthDate() const;
    --
    - const char* valueDelimOpen() const
    - const char* valueDelimClose() const
}
IPerson <|-- CPerson
PersonInfo <|.. CPerson :(private)

@enduml

@startuml

interface  Widget{
    +Widget();
    +virtual ~Widget();
    +virtual std::size_t size() const;
    +virtual void normalize();
    +void swap(Widget& other);
}

entity doProcessing{ 
    Widget& w
}


@enduml

@startuml

interface MsgSender <<typename Company>>{
    +sendClear(const MsgInfo& info)
    +sendSecret(const MsgInfo& info)
}

class CompanyA{
    +sendCleartext
    +sendEncrypted
}

class CompanyB{
    +sendCleartext
    +sendEncrypted
}

class MsgInfo{}

MsgSender <|.. CompanyA
MsgSender <|.. CompanyB
CompanyA <|-- MsgInfo
CompanyB <|-- MsgInfo

@enduml



@startuml

SquareMatrixBase2 <|-- SquareMatrix2


@enduml 

@startuml
Top <|-- Middle
Middle <|-- Bottom

@enduml

@startuml

class MY_class{
    +class iterator
    +   typedef XXXXX  iterator_category 
}
interface  iterator{
    + typedef XXX iterator_category
}

interface std::iterator_traits {
    typedef typename IterT::iterator_category iterator_category;
}

std::iterator_traits <|-- iterator


class advance{
    +void doAdvance(IterT& DistT, std::random_access_iterator_tag)
    +void doAdvance(IterT& DistT, std::bidirectional_iterator_tag)
    +void doAdvance(IterT& DistT, std::input_iterator_tag)
}

class doAdvancestd::iter1 {

}

class doAdvancestd::iter2 {

}
class doAdvancestd::iter3 {

}

doAdvancestd::iter3  <|--advance
doAdvancestd::iter2  <|--advance
doAdvancestd::iter1  <|--advance
@enduml 



@startuml

exception <|-- logic_error
exception <|--  runtime_error

logic_error <|-- domain_error 
logic_error <|-- invalid_argument 
logic_error <|-- length_error 
logic_error <|-- out_of_range 

runtime_error <|-- range_error
runtime_error <|-- underflow_error
runtime_error <|-- overflow_error





@enduml


@startuml
class NewsLetter{
- list
}

class NLComponent{

}

class TextBlock{}

class Graphic {}

NLComponent <-- TextBlock 
NLComponent <--  Graphic 

NewsLetter::list -> NLComponent


@enduml

@startuml
class GameObject{

}
class SpaceShip{

}
class Asteroid{

}

GameObject <-- Asteroid
GameObject <--  SpaceStation
GameObject <-- SpaceShip

class CommercialShip{

}
class MilitaryShip{

}
SpaceShip <-- CommercialShip
SpaceShip <-- MilitaryShip




@enduml